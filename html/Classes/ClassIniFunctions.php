<?php
# Karl Keusgen
# 2019-10-31
#
# functions concerning ini files
#

class ClassIniFunctions
{
	public $UpdateDirectoryBase = "/multus/tmp";
	public $UpdateDirectory = "/multus/tmp";
	
	public $ini = array();
	public $ConfigFile = "";
	public $bIniNeedsToBeWritten = False;
	public $ConfigInitiallyRead = False;

	// it is not neededt o be public, but we set this value in the inherited class
	public $Heading = "Setup";
	public $EditRightLevel = 100;

	public $RebootAtTimestamp = 0;

	public $ChangedKeys = array();

	private $AvailableTypesTextBox = array('Int', 'HexInt', 'ArrayHexInt', 'ArrayInt', 'ArrayStr', 'Str', 'IP', 'Float', 'StrDatabase', 'IntDatabase', 'VersionStr');
	private $NoValueTypes = array('Spacer', 'Profiles', 'SingleProfile', 'Info');


	function writeIni($array, $file)
	{
		$res = array();

		$res[] = "; Autogenerated Config by ".$_SERVER['PHP_SELF'];
		$res[] = "";
		foreach($array as $key => $val)
		{
			/*
			print "Now we dump key \n";
			var_dump($key);

			print "Now we dump val \n";
			var_dump($val);
			*/
			
			if(is_array($val))
			{
				//We add an empty line
				$res[] = "";
				
				$res[] = "[$key]";
				foreach($val as $skey => $sval) 
				{
					//print "Key: $key skey: $skey  sval: $sval<br>";
					
					if (is_array($sval))
					{
						$i = 0;
						foreach ($sval as $Element)
						{
							// normally in a php config file [] is suffiucient for an element of an array
							// but python cannot handle this, so we put an number in it
							// php does not care about the numer and gets it always right
							$res[] = $skey."[$i] = ".$Element;
							$i = $i + 1;
						}
					}
					elseif (is_numeric($sval))
					{
						$res[] = "$skey = ".$sval;
					}
					else
					{
						$res[] = "$skey = ".'"'.$sval.'"';
					}
				}
			}
			else 
			{
				$res[] = "$key = ".(is_numeric($val) ? $val : '"'.$val.'"');
			}
		}

		#var_dump($res);

		$this->__safefilerewrite($file, implode("\n", $res));
	}

	function __safefilerewrite($fileName, $dataToSave)
	{    
		if ($fp = fopen($fileName, 'w'))
		{
			$startTime = microtime(TRUE);
			do
			{
				$canWrite = flock($fp, LOCK_EX);
			   
				// If lock not obtained sleep for 0 - 100 milliseconds, to avoid collision and CPU load
				if(!$canWrite)
					usleep(round(rand(0, 100)*1000));
			} 
			
			while ((!$canWrite)and((microtime(TRUE)-$startTime) < 5));

			//file was locked so now we can store information
			if ($canWrite)
			{
				fwrite($fp, $dataToSave);
				flock($fp, LOCK_UN);
			}

			fclose($fp);
		}
	}

	function ReadConfigFile($ConfigFile)
	{
		$this->ini = parse_ini_file($ConfigFile, True);
		$this->ConfigInitiallyRead = True;
		//var_dump($this->ini);
	}

	function HandleApplyButton()
	{
		$WeAreOnRadios = False;
		$SelectedRadio = "";

		// We first check on the allpy Button
		if (isset($_POST['apply']))
		{
			$this->bIniNeedsToBeWritten = False;

			// Maybe we got some changes.. now we have to figure out, what has changed
			foreach ($this->ini as $Key => $Parameter)
			{
				$Type = $Parameter['Type'];

				if ($WeAreOnRadios && ($Type != 'SingleRadio'))
				{
					$WeAreOnRadios = False;
				}

				//print "<H4>Type: $Type Key: $Key </H4>";
				if ($Type == 'Radios')
				{
					$WeAreOnRadios = True;
					if (isset($_POST[$Key]))
					{
						$SelectedRadio = $_POST[$Key];
						//print "Key: $Key SelectedRadio: $SelectedRadio <br>";
					}
				}
				elseif ($WeAreOnRadios && ($Type == 'SingleRadio') && ($this->EditRightLevel <= $Parameter['EditRightLevel']))
				{
					
					if ($Key == $SelectedRadio)
					{
						if (! $this->ini[$Key]['Value'])
						{
							$this->bIniNeedsToBeWritten = True;
						
							if (! in_array($Key, $this->ChangedKeys))
								$this->ChangedKeys[] = $Key;
						}

						$this->ini[$Key]['Value'] = True;
					}
					else
					{
						if ($this->ini[$Key]['Value'])
						{
							$this->bIniNeedsToBeWritten = True;

							if (! in_array($Key, $this->ChangedKeys))
								$this->ChangedKeys[] = $Key;
						}

						$this->ini[$Key]['Value'] = False;
					}
				}
				elseif (($Type == 'Bool') && ($this->EditRightLevel <= $Parameter['EditRightLevel']))
				{
					/*
					print "Dump of _POST Key: ";
					var_dump(isset($_POST[$Key]));
					print ("<br> Dump of ini Value: ");
					var_dump($this->ini[$Key]['Value']);
					*/

					if (isset($_POST[$Key]) && ! $this->ini[$Key]['Value'] )
					{
						$this->ini[$Key]['Value'] = True;

						$this->bIniNeedsToBeWritten = True;

						if (! in_array($Key, $this->ChangedKeys))
							$this->ChangedKeys[] = $Key;
					}
					elseif (! isset($_POST[$Key]) && $this->ini[$Key]['Value'] )
					{
						$this->ini[$Key]['Value'] = False;

						$this->bIniNeedsToBeWritten = True;

						if (! in_array($Key, $this->ChangedKeys))
							$this->ChangedKeys[] = $Key;
					}
	
				}
				// 2020-02-08
				// we do the version thing
				elseif ($Type == 'VersionStr')
				{
					#print ("<br>Now we do the Version upgrade from $this->ini[$Key]['Value'] <br>");
					$VersionStrKey = $Key;
					$ConfigVersion = $this->ini[$Key]['Value'];
					$StrVersion = explode('.', $ConfigVersion);
					# we count up the last version place automatically
					$StrVersion[2] = (string)((int)$StrVersion[2] + 1);

					$ConfigVersion = $StrVersion[0].'.'.$StrVersion[1].'.'.$StrVersion[2];
				}
				// text boxes amd all the rest
				elseif (! in_array($Type, $this->NoValueTypes) && ($this->EditRightLevel <= $Parameter['EditRightLevel']))
				{
					$Value = $Parameter['Value'];
					$NewValue = trim($_POST[$Key]);
					//print "<H4>We are working on the value Type: X $Type X OldValue: X $Value X NewValue: X $NewValue X </H4>";
					if ((in_array($Type, $this->AvailableTypesTextBox) || ($Type == 'TextArea') || ($Type == 'Password')) && $Value != $NewValue)
					{
						//print "<H4>$Key has changed</H4>";
						$this->ini[$Key]['Value'] = $NewValue;
						$this->bIniNeedsToBeWritten = True;

						if (! in_array($Key, $this->ChangedKeys))
							$this->ChangedKeys[] = $Key;
					}
					elseif ($Type == 'FilenameToTextArea')
					{
						## We renew the file every time.. not so easy to check whether there had been some changes
						$File = fopen($Value, "w");
						fwrite($File, $NewValue);
						fclose($File);
						
						## 2020-01-12
						## the file has been written DOS style.. we don't want this and as a script it is not allowed and results into bash errors
						$file = file_get_contents($Value);
						$file = str_replace("\r", "", $file);
						file_put_contents($Value, $file);
					}
				}
			}

			if ($this->bIniNeedsToBeWritten)
				$this->ini[$VersionStrKey]['Value'] = $ConfigVersion;

			print "<p>This session changed Keys: </p><p>";
			foreach ($this->ChangedKeys as $ChangeKey) 
				print "$ChangeKey <br>";
			print "</p>";
		}
	}

	function PutTheTable()
	{
		$bWeAreInRadioSection = False;
		
		$ColsSize = 55;
		$BoxColsSize = 70;

		echo "<table cellspacing='1' cellpadding='3' border=0 bgcolor='#000000'>";
			echo "<tr align=center bgcolor='#FFFFFF'>";
				echo "<th>$this->Heading</th>";
			echo "</tr>";
			echo "<tr align=center bgcolor='#FFFFFF'><td>";
				echo "<table cellspacing='1' cellpadding='10' border=0 bgcolor='#000000'></td>";
					echo "<tr align=center bgcolor='#FFFFFF'>";
						echo "<th width='50'>";
							echo "Key";
						echo "</th>";
						echo "<th width='600'>";
							echo "Parameter";
						echo "</th>";
						echo "<th width='400'>";
							echo "Value";
						echo "</th>";
					echo "</tr>";

					// Now we loop throuch the available modules
					foreach ($this->ini as $Key => $Parameter)
					{
						$Type = $Parameter['Type'];
						$Description = $Parameter['Description'];

						if ($bWeAreInRadioSection && ($Type != 'SingleRadio'))
						{
							$bWeAreInRadioSection = False;

							// close the radio section
								echo "</td>";
							echo "</tr>";
						}
						
						if (! $bWeAreInRadioSection)
						{
							//Normal Stuff

							if (in_array($Type, $this->NoValueTypes))
								echo "<tr align=center bgcolor='#BBBBBB'>";
							else
								echo "<tr align=center bgcolor='#FFFFFF'>";

								echo "<td>";
									echo $Key;
								echo "</td>";
								echo "<td align=left>";
									echo $Description; 
								echo "</td>";
								echo "<td align=left>";
						}
									
									#echo "$Type";
									
									if (('Radios' == $Type) && ! $bWeAreInRadioSection)
									{
										// Start Radio Section
										$bWeAreInRadioSection = True;
										$NameOfRadioSection = $Key;
										//print "We start a Radio section";
									}
									elseif ($bWeAreInRadioSection && ('SingleRadio' == $Type))
									{
										$Value = $Parameter['Value'];
										$Identifier = $Parameter['Key'];
										if ($Value)
											if ($this->EditRightLevel <= $Parameter['EditRightLevel'])
												echo "<input type='radio' name='$NameOfRadioSection' value='$Key' checked='checked'> $Description $Identifier<br>";
											else
												echo "<input type='radio' name='$NameOfRadioSection' value='$Key' checked='checked' disabled> $Description $Identifier<br>";

										else
											if ($this->EditRightLevel <= $Parameter['EditRightLevel'])
												echo "<input type='radio' name='$NameOfRadioSection' value='$Key'> $Description $Identifier<br>";
											else
												echo "<input type='radio' name='$NameOfRadioSection' value='$Key' disabled> $Description $Identifier<br>";
												

										//print "We are in a Radio section";
									}
									elseif (in_array($Type, $this->NoValueTypes))
									{
										echo "";
									}
									elseif ($Type == 'Bool')
									{
										$Value = $Parameter['Value'];
										$Disabled = "disabled";
										if ($this->EditRightLevel <= $Parameter['EditRightLevel'])
										{
											$Disabled = "";
										}
										if ($Value)
											echo "<label> <input type='checkbox' name='$Key' value='True' checked = 'checked' $Disabled> Enabled </label>";
										else
											echo "<label> <input type='checkbox' name='$Key' value='False' $Disabled> Enabled </label>";
		
									}
									// Text boxes
									elseif ($Type == 'TextArea')
									{
										$Value = $Parameter['Value'];
									
										if ($this->EditRightLevel <= $Parameter['EditRightLevel'])
											echo "<textarea name='$Key' cols='$BoxColsSize' rows='10'>$Value</textarea>";
										else
											echo "<textarea name='$Key' cols='$BoxColsSize' rows='10' disabled>$Value</textarea>";

									}
									// 2019-12-31
									// Filename to TextBoxes
									elseif ($Type == 'FilenameToTextArea')
									{
										$FileName = $Parameter['Value'];
										$Value = "";
										// Read in the File
										if (file_exists($FileName))
										{
											$File = fopen($FileName, "r");
											$Value = fread($File,filesize($FileName));
											fclose($File);
										}
										
										if ($this->EditRightLevel <= $Parameter['EditRightLevel'])
											echo "<textarea name='$Key' cols='$BoxColsSize' rows='10'>$Value</textarea>";
										else
											echo "<textarea name='$Key' cols='$BoxColsSize' rows='10' disabled>$Value</textarea>";
									}
									// Passwords
									elseif ($Type == 'Password')
									{
										$Value = $Parameter['Value'];
									
										if ($this->EditRightLevel <= $Parameter['EditRightLevel'])
											echo "<input type='password' size='$ColsSize' name='$Key' value='$Value'>";
										else
											echo "<input type='password' size='$ColsSize' name='$Key' value='$Value' disabled>";

									}
									// normal input boxes
									elseif (in_array($Type, $this->AvailableTypesTextBox))
									{
										$Value = $Parameter['Value'];
									
										if ($this->EditRightLevel <= $Parameter['EditRightLevel'])
											echo "<input type='text' size='$ColsSize' name='$Key' value='$Value'>";
										else
											echo "<input type='text' size='$ColsSize' name='$Key' value='$Value' disabled>";
									}
									else
										echo "unknown Type: $Type";

								
						if (! $bWeAreInRadioSection)
						{
								echo "</td>";
							echo "</tr>";
						}
					} // foreach
				echo "</table>";
			echo "</tr>";
			echo "<tr align='right' bgcolor='#FFFFFF'><td alt='center'>";
				echo "<br><p>";
				echo "<input type='submit' name='apply' value='apply changes'>";
				echo "</p>";
			echo "</td></tr>";
		echo "</table>";

	}


	function PutRebootButtons()
	{
		###
		### TODO
		###
		### Reboot action....
		###
		if (isset($_POST['RebootNow']))
		{
			echo "<p> </p>";
			$this->RebootAtTimestamp = time();
			echo "Rebooing immediatly at $this->RebootAtTimestamp<br>";	

			$ReloadFile = $this->UpdateDirectoryBase."/system/Reboot.0";

			touch($ReloadFile);
			chmod($ReloadFile, 0666);

		}
		elseif (isset($_POST['Reboot5']))
		{
			echo "<p> </p>";
			$this->RebootAtTimestamp = time() + 600;
			echo "Rebooing in 5 minutes at $this->RebootAtTimestamp <br>";	
			$ReloadFile = $this->UpdateDirectoryBase."/system/Reboot.300";

			touch($ReloadFile);
			chmod($ReloadFile, 0666);

		}
		
		echo "<p> </p>";
		echo "<input type='submit' name='RebootNow' value='Reboot Now'>";
		echo "	";
		echo "<input type='submit' name='Reboot5' value='Reboot in 5 Minutes'>";
	
	}

}

?>
